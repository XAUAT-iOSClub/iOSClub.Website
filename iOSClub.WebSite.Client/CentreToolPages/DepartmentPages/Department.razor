@page "/Centre/Department/{Key?}"
@using System.Text
@using iOSClub.Data
@using iOSClub.Data.DataModels
@using iOSClub.WebSite.Client.Models
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@inject IDbContextFactory<iOSContext> DbFactory
@inject IJSRuntime JS
@inject MessageService MessageService
@inject NavigationManager Nav

<PageTitle>社团部门-@Key - iStaff</PageTitle>

<InputFile id="fileInput" OnChange="@UploadFiles" hidden multiple/>

<Modal Title="@("添加")"
       Visible="@_visible"
       OnCancel="@HandleCancel"
       Footer="null">
    <GridRow>
        <GridCol Span="6"/>
        <GridCol Span="12">
            <Space>
                <SpaceItem>
                    <Search EnterButton="@("搜索")" OnSearch="@(async s => await Search(s))" Size="large"/>
                </SpaceItem>
            </Space>
        </GridCol>
        <GridCol Span="6"/>
    </GridRow>
    <Table TItem="StudentModel" PageSize="3" DataSource="@SearchResult">
        <PropertyColumn Title="姓名" Property="c => c.UserName"/>
        <PropertyColumn Title="学号" Property="c => c.UserId"/>
        <PropertyColumn Title="学院" Property="c => c.Academy"/>
        <ActionColumn Title="操作">
            <Button OnClick="@(() => Add(context))">添加</Button>
        </ActionColumn>
    </Table>
</Modal>

<PageView Style="min-height: 100%" ContextStyle="padding:10px;">
    <Extra>
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary">下载文件</Button>
            </SpaceItem>
            <SpaceItem>
                <Upload Name="files">
                    <label class="ant-btn" for="fileInput">上传Json数据</label>
                </Upload>
            </SpaceItem>
        </Space>
    </Extra>
    <Context>
        <Tabs Centered @bind-ActiveKey="@Key">
            <TabPane Tab="总览" Key="总览">
                <Flex Justify="space-between">
                    <h2>社长/团支书/秘书长</h2>
                    @if (Member.Identity == "President" || Member.Identity == "Minister")
                    {
                        <Space>
                            <SpaceItem>
                                <Button OnClick="() => OpenAddMember()">添加成员</Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Button Danger OnClick="() => DeleteAll(Staffs.Ministers)">全部删除</Button>
                            </SpaceItem>
                        </Space>
                    }
                </Flex>
                <br/>
                <Space>
                    @foreach (var item in Staffs.Ministers)
                    {
                        <SpaceItem>
                            <Popconfirm Title="确定删除这条数据?"
                                        Placement="Placement.TopLeft"
                                        OnConfirm="@(async () => await Delete(item, Staffs.Ministers))">
                                <Button Type="@ButtonType.Primary">@item.Name</Button>
                            </Popconfirm>
                        </SpaceItem>
                    }
                </Space>

                <Divider/>
                <Flex Justify="space-between" >
                    <h2>成员</h2>
                    <Space>
                        <SpaceItem>
                            <Statistic GroupSeparator=" " Title="所有部员" Value="@Staffs.Member.Count" TValue="int" Class="desktop-phone">
                                <PrefixTemplate>
                                    <Icon Type="team" Theme="outline"/>
                                </PrefixTemplate>
                            </Statistic>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Type="@ButtonType.Primary" OnClick="@CsvDownload">下载部员信息</Button>
                        </SpaceItem>
                    </Space>
                </Flex>
                <br/>
                <Table TItem="MemberModel" DataSource="@Staffs.Member">
                    <PropertyColumn Title="姓名" Property="c => c.UserName"/>
                    <PropertyColumn Title="学号" Property="c => c.UserId"/>
                    <PropertyColumn Title="学院" Property="c => c.Academy"/>
                    <PropertyColumn Title="政治面貌" Property="c => c.PoliticalLandscape"/>
                    <PropertyColumn Title="性别" Property="c => c.Gender"/>
                    <PropertyColumn Title="专业班级" Property="c => c.ClassName"/>
                    <PropertyColumn Title="手机号码" Property="c => c.PhoneNum"/>
                    <PropertyColumn Title="身份" Property="c => c.Identity"/>
                    <ActionColumn Title="操作">
                        <Button Danger OnClick="@(async () => await Delete(context))">删除</Button>
                    </ActionColumn>
                </Table>
                <Divider/>
                <Flex Justify="space-between">
                    <h2>项目</h2>
                    <Button OnClick="() => AddProj()" Type="@ButtonType.Primary">添加</Button>
                </Flex>
                <AntList Grid="grid" DataSource="@Staffs.Projects">
                    <ListItem>
                        <AppleCard>
                            <TitleTemplate>
                                <h2>@context.Title</h2>
                                <div style="margin-top: 10px">
                                    <Tag Icon="apple" Color="blue-inverse">@context.Department?.Name</Tag>
                                </div>
                            </TitleTemplate>
                            <ContextTemplate>
                                <Flex Vertical Justify="space-between">
                                    <Paragraph Type="secondary">@context.Description</Paragraph>
                                    <Space>
                                        <SpaceItem>
                                            <a href="@($"/Centre/Project/{context.Id}")" class="ant-btn">去看看</a>
                                        </SpaceItem>
                                        <SpaceItem>
                                            <Button OnClick="() => AddProj(context.Id)">更改项目</Button>
                                        </SpaceItem>
                                        <SpaceItem>
                                            <Button Danger OnClick="() => DeleteProj(context, Staffs.Projects)">删除</Button>
                                        </SpaceItem>
                                    </Space>
                                </Flex>
                            </ContextTemplate>
                        </AppleCard>
                    </ListItem>
                </AntList>
                @if (Staffs.Projects.Count == 0)
                {
                    <Empty Image="https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg"
                           Style="padding: 20px" Description="@("没有项目")"/>
                }
            </TabPane>
            @foreach (var department in Departments)
            {
                <TabPane Tab="@department.Name" Key="@department.Name">
                    <Flex Justify="space-between">
                        <h2>部长/副部长</h2>
                        @if (Member.Identity == "President" || Member.Identity == "Minister")
                        {
                            <Space>
                                <SpaceItem>
                                    <Button OnClick="() => OpenAddMember(department)">添加成员</Button>
                                </SpaceItem>
                                <SpaceItem>
                                    <Button Danger OnClick="() => DeleteAll(department.Ministers)">全部删除</Button>
                                </SpaceItem>
                            </Space>
                        }
                    </Flex>
                    <br/>
                    <Space>
                        @foreach (var item in department.Ministers)
                        {
                            <SpaceItem>
                                <Popconfirm Title="确定删除这条数据?"
                                            Placement="Placement.TopLeft"
                                            OnConfirm="@(async () => await Delete(item, department.Ministers))">
                                    <Button Type="@ButtonType.Primary">@item.Name</Button>
                                </Popconfirm>
                            </SpaceItem>
                        }
                    </Space>
                    <Divider/>
                    <Flex Justify="space-between">
                        <h2>成员</h2>
                        @if (Member.Identity == "President" || Member.Identity == "Minister")
                        {
                            <Space>
                                <SpaceItem>
                                    <Button OnClick="@(() => OpenAddMember(department, "Member"))">添加成员</Button>
                                </SpaceItem>
                                <SpaceItem>
                                    <Button Danger OnClick="() => DeleteAll(department.Ministers)">全部删除</Button>
                                </SpaceItem>
                            </Space>
                        }
                    </Flex>
                    <br/>
                    <Table TItem="StaffModel" DataSource="@department.Member">
                        <PropertyColumn Title="姓名" Property="c => c.Name"/>
                        <PropertyColumn Title="学号" Property="c => c.UserId"/>
                        <ActionColumn Title="操作">
                            <Space>
                                <SpaceItem>
                                    <Button Danger OnClick="@(async () => await Delete(context, department.Member))">删除</Button>
                                </SpaceItem>
                            </Space>
                        </ActionColumn>
                    </Table>
                    <Divider/>
                    <Flex Justify="space-between">
                        <h2>项目</h2>
                        <Button OnClick="() => AddProj()" Type="@ButtonType.Primary">添加</Button>
                    </Flex>
                    <AntList Grid="grid" DataSource="@department.Projects">
                        <ListItem>
                            <AppleCard>
                                <TitleTemplate>
                                    <h2>@context.Title</h2>
                                    <div style="margin-top: 10px">
                                        <Tag Icon="apple" Color="blue-inverse">@context.Department?.Name</Tag>
                                    </div>
                                </TitleTemplate>
                                <ContextTemplate>
                                    <Flex Vertical Justify="space-between">
                                        <Paragraph Type="secondary">@context.Description</Paragraph>
                                        <Space>
                                            <SpaceItem>
                                                <a href="@($"/Centre/Project/{context.Id}")" class="ant-btn">去看看</a>
                                            </SpaceItem>
                                            <SpaceItem>
                                                <Button OnClick="() => AddProj(context.Id)">更改项目</Button>
                                            </SpaceItem>
                                            <SpaceItem>
                                                <Button Danger OnClick="() => DeleteProj(context, department.Projects)">删除</Button>
                                            </SpaceItem>
                                        </Space>
                                    </Flex>
                                </ContextTemplate>
                            </AppleCard>
                        </ListItem>
                    </AntList>
                    @if (department.Projects.Count == 0)
                    {
                        <Empty Image="https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg"
                               Style="padding: 20px" Description="@("没有项目")"/>
                    }
                </TabPane>
            }
        </Tabs>
    </Context>
</PageView>


@code
{
    private readonly ListGridType grid = new()
    {
        Gutter = 16,
        Xs = 1,
        Sm = 2,
        Md = 4,
        Lg = 4,
        Xl = 6,
        Xxl = 3,
    };

    [Parameter] public string? Key { get; set; }
    [CascadingParameter] private MemberModel Member { get; set; } = new();
    private List<DepartmentList> Departments { get; set; } = [];
    private MemberList Staffs { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Key ??= "总览";
        await using var db = await DbFactory.CreateDbContextAsync();

        Departments = await db.Departments
            .Include(x => x.Projects)
            .ThenInclude(x => x.Department)
            .Include(x => x.Staffs)
            .Select(x => new DepartmentList()
            {
                Name = x.Name, Projects = x.Projects, Ministers = x.Staffs.Where(y => y.Identity == "Minister").ToList(),
                Member = x.Staffs.Where(y => y.Identity == "Department").ToList()
            })
            .ToListAsync();


        Staffs.Ministers = await db.Staffs.Where(x => x.Identity == "President").ToListAsync();
        var departmentMember = new List<StaffModel>();

        departmentMember.AddRange(Staffs.Ministers);
        foreach (var item in Departments)
        {
            foreach (var minister in item.Ministers)
            {
                minister.Department = new DepartmentModel() { Name = item.Name };
                departmentMember.Add(minister);
            }

            foreach (var model in item.Member)
            {
                model.Department = new DepartmentModel() { Name = item.Name };
                departmentMember.Add(model);
            }
        }

        foreach (var model in departmentMember)
        {
            var student = await db.Students.FirstOrDefaultAsync(x => x.UserId == model.UserId);
            if (student == null) continue;
            var member = MemberModel.CopyFrom(student);
            member.Identity = $"{model.Department?.Name}{MemberModel.IdentityDictionary[model.Identity]}";
            Staffs.Member.Add(member);
        }

        Staffs.Projects = await db.Projects.Include(x => x.Department).ToListAsync();
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var reader = new StreamReader(e.File.OpenReadStream());
        var result = await reader.ReadToEndAsync();
        reader.Dispose();
        if (string.IsNullOrEmpty(result)) return;
        await using var context = await DbFactory.CreateDbContextAsync();

        var json = JsonConvert.DeserializeObject<List<StaffModel>>(result);

        if (json == null) return;

        foreach (var staff in json)
        {
            if (await context.Staffs.AnyAsync(x => x.UserId == staff.UserId)) continue;
            await context.Staffs.AddAsync(staff);
        }

        StateHasChanged();
    }

    private async Task CsvDownload()
    {
        var p = new List<MemberModel>();
        await using var db = await DbFactory.CreateDbContextAsync();
        foreach (var item in Staffs.Ministers)
        {
            var student = await db.Students.FirstOrDefaultAsync(x => x.UserId == item.UserId);
            if (student == null) continue;
            var member = MemberModel.CopyFrom(student);
            member.Identity = item.Identity;
            p.Add(member);
        }

        p.AddRange(Staffs.Member);
        var jsonString = MemberModel.GetCsv(p);
        var data = Encoding.UTF8.GetBytes(jsonString);
        await Download("部员信息.csv", data);
    }

    private async Task Download(string fileName, byte[] data)
    {
        await JS.InvokeVoidAsync("jsSaveAsFile", fileName, Convert.ToBase64String(data));
    }

    private async Task Delete(StaffModel item, List<StaffModel> list)
    {
        await using var dbContext = await DbFactory.CreateDbContextAsync();
        dbContext.Staffs.Remove(item);
        list.Remove(item);
        await dbContext.SaveChangesAsync();
    }

    private async Task Delete(MemberModel model)
    {
        await using var dbContext = await DbFactory.CreateDbContextAsync();
        var s = await dbContext.Staffs.FirstOrDefaultAsync(x => x.UserId == model.UserId);
        if (s == null) return;
        dbContext.Staffs.Remove(s);
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }

    private bool _visible;

    private void HandleCancel()
    {
        SearchResult.Clear();
        _visible = false;
    }

    private DepartmentList? _department;
    private string _identity = "";
    private List<StudentModel> SearchResult { get; set; } = [];

    private async Task Search(string s)
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        SearchResult = await context.Students.Where(x => x.UserName.StartsWith(s)).ToListAsync();
        StateHasChanged();
    }

    private async Task Add(StudentModel model)
    {
        var staff = new StaffModel() { Name = model.UserName, UserId = model.UserId };

        await using var context = await DbFactory.CreateDbContextAsync();
        if (_department == null)
        {
            staff.Identity = "President";
        }
        else
        {
            staff.Identity = _identity;
            staff.Department = await context.Departments.FirstOrDefaultAsync(x => x.Name == _department.Name);
        }

        if (await context.Staffs.AnyAsync(x => x.UserId == model.UserId))
        {
            await MessageService.Warn("该用户已存在");
        }
        else
        {
            await context.Staffs.AddAsync(staff);
            await context.SaveChangesAsync();

            if (_department == null)
            {
                Staffs.Ministers.Add(staff);
            }
            else
            {
                if (_identity == "Member")
                {
                    _department.Member.Add(staff);
                }
                else
                {
                    _department.Ministers.Add(staff);
                }
            }

            StateHasChanged();
            await MessageService.Success("添加成功");
        }
    }

    public class DepartmentList
    {
        public string Name { get; init; } = "";
        public List<StaffModel> Ministers { get; init; } = [];
        public List<StaffModel> Member { get; init; } = [];
        public List<ProjectModel> Projects { get; init; } = [];
    }

    public class MemberList
    {
        public List<StaffModel> Ministers { get; set; } = [];
        public List<MemberModel> Member { get; set; } = [];
        public List<ProjectModel> Projects { get; set; } = [];
    }

    private void OpenAddMember(DepartmentList? model = null, string identity = "Minister")
    {
        _department = model;
        _identity = identity;
        _visible = true;
    }

    private async Task DeleteAll(List<StaffModel> c)
    {
        await using var dbContext = await DbFactory.CreateDbContextAsync();
        dbContext.Staffs.RemoveRange(c);
        await dbContext.SaveChangesAsync();

        c.Clear();
        StateHasChanged();
    }

    private void AddProj(string id = "")
    {
        Nav.NavigateTo($"/Centre/EditProject/{id}");
    }

    private async Task DeleteProj(ProjectModel item, List<ProjectModel> list)
    {
        await using var dbContext = await DbFactory.CreateDbContextAsync();
        dbContext.Projects.Remove(item);
        await dbContext.SaveChangesAsync();
        list.Remove(item);
        StateHasChanged();
    }
}