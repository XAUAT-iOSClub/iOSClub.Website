@inherits LayoutComponentBase
@using iOSClub.Data
@using iOSClub.Data.DataModels
@using iOSClub.WebSite.Client.IdentityModels
@using iOSClub.WebSite.Client.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<iOSContext> DbFactory
@inject AuthenticationStateProvider authStateProvider
@inject MessageService MessageService
@inject NavigationManager NavigationManager

<Layout Style="height: 100vh">
    <Header Class="Layout-Header">
        <Flex Align="center" Justify="space-between" Style="width: 100%">
            <a href="/">
                <Flex Gap="large">
                    <Image Src="iOS_Club_LOGO.png" Preview="false" Style="width:40px; height:40px"/>
                    <div class="Layout-Title">iMember</div>
                </Flex>
            </a>
            <Popover Class="Layout-Popover desktop-phone-flex" Trigger="@(new[] { Trigger.Click })">
                <TitleTemplate>
                    <Space Size="@("middle")">
                        <SpaceItem>
                            @if (Member.Identity != "Founder")
                            {
                                <Image Style="height: 60px;width: 60px" Preview="false"
                                       Src="@(Member.Gender == "男" ? "Centre/男生.png" : "Centre/女生.png")"/>
                            }
                            else
                            {
                                <Image Style="height: 60px;width: 60px" Preview="false" Src="iOS_Club_LOGO.png"/>
                            }
                        </SpaceItem>
                        <SpaceItem>
                            <div>
                                <span style="font-size: 22px;font-weight: bold">@Member.UserName</span>
                                <Paragraph Type="secondary">@Member.UserId</Paragraph>
                            </div>
                        </SpaceItem>
                    </Space>
                </TitleTemplate>
                <ContentTemplate>
                    <Paragraph Type="secondary">
                        当前身份:@MemberModel.IdentityDictionary[Member.Identity]
                    </Paragraph>
                    <Button Type="@ButtonType.Text" Danger OnClick="Logout">
                        退出登录
                    </Button>
                </ContentTemplate>
                <ChildContent>
                    <Button Type="@ButtonType.Text">
                        <Icon Type="user" Theme="outline" Class="Layout-Title"/>
                    </Button>
                </ChildContent>
            </Popover>
            <Button Size="@AntSizeLDSType.Large" class="phone-desktop-flex" Type="@ButtonType.Text"
                    OnClick="@(() => _drawerVisible = !_drawerVisible)">
                <Icon Type="menu" Theme="outline" Class="Layout-Title"/>
            </Button>
        </Flex>
    </Header>
    <Content Class="Layout-Context">
        <CascadingValue Value="@Member">
            @if (_drawerVisible)
            {
                <CentreMenu OnMenuItemClicked="() => _drawerVisible = false"
                            Style="padding-top: 10px;animation: fade-in ease-in 0.3s;"
                            State="@Member.Identity"/>
            }
            else
            {
                @Body   
            }
        </CascadingValue>
    </Content>
</Layout>

@code
{

    private MemberModel Member { get; set; } = new() { UserName = "游客" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        var m = await ((JwtProvider)authStateProvider).GetPermission();

        if (m != null)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            var model = await context.Students.FirstOrDefaultAsync(x => x.UserId == m.UserId && x.UserName == m.Name);

            if (model == null)
            {
                var f = await context.Staffs.FirstOrDefaultAsync(x => x.UserId == m.UserId && x.Name == m.Name);
                if (f == null) return;
                model = new MemberModel()
                {
                    UserId = f.UserId,
                    UserName = f.Name,
                    Identity = f.Identity
                };
            }

            Member = MemberModel.AutoCopy<StudentModel, MemberModel>(model);
            Member.Identity = m.Identity;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private bool _drawerVisible;

    private async Task Logout()
    {
        var provider = (AbsProvider)authStateProvider;
        await MessageService.Success("您已注销");
        await provider.Logout();
        NavigationManager.NavigateTo("");
    }

}

<style>
    
    .Layout-Header {
        background: #ffffff;
    }

    .Layout-Title {
        font-size: 24px;
        font-weight: bold;
        color: #191c1f;
    }
    
    .Layout-Popover{
        border-radius: 10px;
    }

    .ant-popover-inner {
        border-radius: 12px;
        padding: 10px;
    }

    .ant-drawer-content {
        border-radius: 0 0 20px 20px;
    }
    
    .Layout-Context{
        
    }
</style>