@page "/Article/{Name}"
@using iOSClub.WebSite.Client.Models
@using Markdig
@using Markdig.Syntax

<PageTitle>@Title - iArticle</PageTitle>

<Breadcrumb Style="margin-bottom: 10px" Class="desktop-phone">
    <BreadcrumbItem>
        <a href="/Articles">社团文章</a>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <a href="/Article/@Name">@Title</a>
    </BreadcrumbItem>
</Breadcrumb>

<GridRow>
    <GridCol Xs="24" Sm="24" Md="20" Lg="20" Xl="20" Xxl="20">
        <MarkdownRenderer html="@Content" BaseUrl="ArticleFile"/>
    </GridCol>
    <GridCol Md="4" Lg="4" Xl="4" Xxl="4" Class="desktop-phone">
        <Affix>
            <Anchor>
                @foreach (var s in Anchors)
                {
                    <AnchorLink Href="@s.Link" Title="@s.Name"/>
                }
            </Anchor>
        </Affix>
    </GridCol>
</GridRow>

@code {
    [Parameter] public string? Name { get; set; }
    private string Content { get; set; } = "";
    private List<MarkAnchorModel> Anchors { get; } = [];
    private string Title { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Name)) return;
        Title = Name.Replace("-", "/");
        if (SignRecord.MarkdownData.TryGetValue(Name, out var value)) Title = value;

        var info = new FileInfo($"wwwroot/ArticleFile/{Name.Replace("-", "/")}.md");
        if (!info.Exists) return;
        var content = await File.ReadAllTextAsync(info.FullName);
        Content = content;
        var pipeline = new MarkdownPipelineBuilder().Build();
        var document = Markdown.Parse(content, pipeline);
        Anchors.Clear();
        await document.ForEachAsync(x =>
        {
            if (x is not HeadingBlock { Inline: not null } headingBlock) return Task.CompletedTask;
            

            Anchors.Add(new MarkAnchorModel()
            {
                Name = headingBlock.Inline.FirstChild!.ToString()!,
                Link = $"/Article/{Name}#{headingBlock.Inline.FirstChild!}"
            });

            return Task.CompletedTask;
        });
    }

}