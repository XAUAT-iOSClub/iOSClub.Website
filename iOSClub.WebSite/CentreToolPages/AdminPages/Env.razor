@page "/Admin/Env"
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Json
@using System.Text.Unicode
@using iOSClub.Data
@using iOSClub.WebSite.Models
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject IWebHostEnvironment HostEnvironment
@inject IJSRuntime JS
@inject IDbContextFactory<iOSContext> DbFactory

<PageTitle>服务器环境 - iAdmin</PageTitle>

<InputFile id="fileInput" OnChange="@UploadFiles" hidden multiple/>

<PageView Style="min-height: 100%">
    <Extra>
        <Space Size="@("small")">
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="JsonDownload">下载所有数据</Button>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" Danger OnClick="RemoveAllData">删除所有数据</Button>
            </SpaceItem>
            <SpaceItem>
                <Upload Name="files">
                    <label class="ant-btn" for="fileInput">上传Json数据</label>
                </Upload>
            </SpaceItem>
        </Space>
    </Extra>
    <Context>
        <div style="margin: 10px">
            @if (HostEnvironment.IsDevelopment())
            {
                <Result Title="当前为开发环境！"/>
            }
            else if (HostEnvironment.IsProduction())
            {
                <Result Title="当前为生产环境！"/>
            }
        </div>
    </Context>
</PageView>

@code
{
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var reader = new StreamReader(e.File.OpenReadStream());
        var result = await reader.ReadToEndAsync();
        reader.Dispose();
        if (string.IsNullOrEmpty(result)) return;
        await using var context = await DbFactory.CreateDbContextAsync();

        var allData = JsonConvert.DeserializeObject<AllDataModel>(result);

        if (allData == null) return;

        foreach (var student in allData.Students.Where(student => string.IsNullOrEmpty(student.JoinTime)))
        {
            student.JoinTime = "2023-10-18";
        }

        await context.Students.AddRangeAsync(allData.Students);
        await context.Staffs.AddRangeAsync(allData.Staffs.Where(staff => staff.Identity != "Founder"));
        await context.Tasks.AddRangeAsync(allData.Tasks);
        await context.Projects.AddRangeAsync(allData.Projects);
        await context.Resources.AddRangeAsync(allData.Resources);
        
        await context.SaveChangesAsync();
    }

    private async Task JsonDownload()
    {
        var options = new JsonSerializerOptions
        {
            Encoder = JavaScriptEncoder.Create(UnicodeRanges.All)
        };
        await using var context = await DbFactory.CreateDbContextAsync();

        var Models = new AllDataModel
        {
            Students = await context.Students.ToListAsync(),
            Staffs = await context.Staffs.ToListAsync(),
            Tasks = await context.Tasks.ToListAsync(),
            Projects = await context.Projects.ToListAsync(),
            Resources = await context.Resources.ToListAsync()
        };
        var jsonString = JsonSerializer.Serialize(Models, options);
        var data = Encoding.UTF8.GetBytes(jsonString);

        await JS.InvokeVoidAsync("jsSaveAsFile", "allData.json", Convert.ToBase64String(data));
    }

    private async Task RemoveAllData()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        await context.Projects.ExecuteDeleteAsync();
        await context.Resources.ExecuteDeleteAsync();
        context.Staffs.RemoveRange(context.Staffs.Where(x => x.Identity != "Founder"));
        await context.Students.ExecuteDeleteAsync();
        await context.Tasks.ExecuteDeleteAsync();
        await context.SaveChangesAsync();
    }
}