@page "/Centre/Tool"
@using iOSClub.Data
@using iOSClub.Data.DataModels
@using iOSClub.WebSite.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<iOSContext> DbFactory
@inject NavigationManager Nav
@inject MessageService MessageService

<PageTitle>iOS App - 西建大iOS Club</PageTitle>

<PageView Style="min-height: 100%" ContextStyle="padding: 10px;">
    <Extra>
        @if (IsAdmin)
        {
            <Button Type="@ButtonType.Primary" OnClick="@OpenModal">添加工具</Button>
        }
    </Extra>
    <Context>
        @if (Tools.Count == 0)
        {
            <Empty Image="https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg" Style="padding: 20px">
                <DescriptionTemplate>
                    <span>社团目前还没有工具</span>
                </DescriptionTemplate>
            </Empty>
        }
        else
        {
            <AntList Grid="grid" DataSource="@Tools">
                <ListItem >
                    <AppleCard>
                        <TitleTemplate>
                            <Flex Gap="large" Align="center">
                                <img style="max-height: 48px;max-width: 48px" src="@context.IconUrl" alt="@context.Name"/>
                                <Title Level="3">@context.Name</Title>
                            </Flex>
                        </TitleTemplate>
                        <ContextTemplate>
                            <Flex Vertical Justify="space-between" Align="flex-start" Style="height: 200px">
                                <div>
                                    <Paragraph Style="margin-top: 10px" Type="secondary">@context.Description</Paragraph>
                                    @foreach (var tag in context.Tag?.Split(",")!)
                                    {
                                        <Tag Color="blue-inverse">@tag</Tag>
                                    }
                                </div>
                                <Space>
                                    <SpaceItem>
                                        <Button Type="@ButtonType.Primary" OnClick="@(() => Nav.NavigateTo(context.Url))">
                                            去看看
                                        </Button>
                                    </SpaceItem>
                                    @if (IsAdmin)
                                    {
                                        <SpaceItem>
                                            <Button Type="@ButtonType.Primary" OnClick="@(() => OpenModal(context))">更改</Button>
                                        </SpaceItem>
                                        <SpaceItem>
                                            <Button Danger OnClick="@(() => Delete(context))">删除</Button>
                                        </SpaceItem>
                                    }
                                </Space>
                            </Flex>
                        </ContextTemplate>
                    </AppleCard>
                </ListItem>
            </AntList>
        }
    </Context>
</PageView>

<Modal @bind-Visible="@_visible" Footer="@null">
    <Form Model="Data"
          OnFinish="OnFinish" ValidateMode="FormValidateMode.Rules">
        <FormItem Class="item" Label="App名称" Rules="@SignRecord.TaskTitleRules">
            <Input @bind-Value="@context.Name"/>
        </FormItem>
        <FormItem Class="item" Label="App描述" Rules="@SignRecord.TaskDescriptionRules">
            <TextArea @bind-Value="@context.Description" ></TextArea>
        </FormItem>
        <FormItem Class="item" Label="App链接">
            <Input @bind-Value="@context.Url"/>
        </FormItem>
        <FormItem Class="item" Label="App封面">
            <Input @bind-Value="@context.IconUrl"/>
        </FormItem>
        <FormItem Class="item" Label="App标签">
            <Input @bind-Value="@context.Tag"/>
        </FormItem>
        <FormItem Style="text-align: center">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                @if (string.IsNullOrEmpty(Data.Id))
                {
                    <p>添加</p>
                }
                else
                {
                    <p>更改</p>
                }
            </Button>
        </FormItem>
    </Form>
</Modal>

@code
{
    private static ListGridType grid => new()
    {
        Gutter = 16,
        Xs = 1,
        Sm = 2,
        Md = 3,
        Lg = 3,
        Xl = 3,
        Xxl = 3,
    };

    [CascadingParameter] private MemberModel Member { get; set; } = new();
    private List<ToolModel> Tools { get; set; } = [];
    private bool IsAdmin { get; set; }
    private ToolModel Data { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        Tools = await context.Tools.ToListAsync();
        IsAdmin = Member.Identity.Contains("President") || Member.Identity.Contains("Minister");
    }

    private async Task Delete(ToolModel model)
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        var toolModel = await context.Tools.FirstAsync(x => x.Id == model.Id);
        context.Tools.Remove(toolModel);
        await context.SaveChangesAsync();
        Tools.Remove(model);
        await MessageService.Success("删除成功");
    }

    private void OpenModal()
    {
        _visible = true;
    }

    private void OpenModal(ToolModel model)
    {
        Data = model;
        _visible = true;
    }

    private bool _visible;

    private async Task OnFinish()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        if (string.IsNullOrEmpty(Data.Id))
        {
            Data.Id = DataTool.StringToHash(Data.ToString());
            context.Tools.Add(Data);
            Tools.Add(Data);
        }
        else
        {
            var tool = await context.Tools.FirstAsync(x => x.Id == Data.Id);
            tool.Update(Data);
        }

        await context.SaveChangesAsync();
        _visible = false;
        await MessageService.Success("更改成功");
    }
}