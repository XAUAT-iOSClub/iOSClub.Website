@page "/Series/{Se}/{Name?}"
@using iOSClub.WebSite.Models
@using Markdig.Syntax
@using Markdig.Syntax.Inlines

@using Markdig

<PageTitle>@(string.IsNullOrEmpty(Name) ? "序列" : Name.Replace("-", " ")) - iOS Club和你一起学 @Se</PageTitle>

<Drawer Placement="top" Closable="false"
        Visible="@_drawerVisible"
        Height="340"
        OnClose="@(() => _drawerVisible = false)">
    <Flex Gap="large" Justify="space-between">
        <Image Src="iOS_Club_LOGO.png" Preview="false" Style="width:40px; height:40px"/>
        <div style="font-size: 24px;font-weight: bold;color: #1c1f23">iOS Learn</div>
    </Flex>
    @Menu
</Drawer>


<GridRow>
    <GridCol Md="6" Lg="6" Xl="4" Xxl="4"
             class="desktop-phone" style="overflow: auto;width:200px;">
        @Menu
    </GridCol>
    <GridCol Xs="24" Sm="24" Md="18" Lg="18" Xl="20" Xxl="20"
             Style="padding: 20px;min-height: 100vh;">
        <Button Type="@ButtonType.Text" Class="phone-desktop" OnClick="@(() => _drawerVisible = true)">
            <Icon Type="menu" Theme="outline"/>
            <span style="margin-left: 10px">导航</span>
        </Button>
        @if (!string.IsNullOrEmpty(Name))
        {
            <GridRow>
                <GridCol Xs="24" Sm="24" Md="20" Lg="20" Xl="20" Xxl="20">
                    <MarkdownRenderer html="@Content" />
                </GridCol>
                <GridCol Md="4" Lg="4" Xl="4" Xxl="4" Class="desktop-phone">
                    <Affix>
                        <Anchor>
                            @foreach (var s in Anchors)
                            {
                                <AnchorLink Href="@s.Link" Title="@s.Name"/>
                            }
                        </Anchor>
                    </Affix>
                </GridCol>
            </GridRow>
        }
        else
        {
            <Title Level="2">iOS Club和你一起学 @Se</Title>
            <GridRow Class="block" Gutter="(20, 24)">
                @for (var i = 1;i <= List.Length ;i++)
                {
                    var i1 = i;
                    <GridCol Xs="24" Sm="24" Md="12" Lg="12" Xl="12" Xxl="12">
                        <a href="@($"/Series/{Se}/{i1 + "-" + List[i1 - 1]}")">
                            <Card Hoverable Class="card" Bordered="false">
                                <h1 style="margin-top: 10px;margin-bottom: 10px;">@List[i1-1]</h1>
                            </Card>
                        </a>
                    </GridCol>
                }
            </GridRow>
        }
        <BackTop Style="margin-bottom:60px">
            <div class="ant-back-top-inner">
                <Icon Type="arrow-up" Theme="outline"/>
            </div>
        </BackTop>
    </GridCol>
</GridRow>

@code
{
    private bool _drawerVisible;
    private void Close() => _drawerVisible = false;
    [Parameter] public string? Name { get; set; }
    [Parameter] public string? Se { get; set; }
    private string Content { get; set; } = "";
    private List<MarkAnchorModel> Anchors { get; } = [];

    private RenderFragment Menu =>
        @<Template>
            <Menu Theme="MenuTheme.Light"
                  Mode="MenuMode.Inline" Class="menu-block">
                <MenuItemGroup Class="group-block">
                    <TitleTemplate>
                        <div class="group-title">
                            iOS Club和你一起学 @Se
                        </div>
                    </TitleTemplate>
                    <ChildContent>
                        <MenuItem RouterLink="@($"/Series/{Se}")"
                                  RouterMatch="NavLinkMatch.All" OnClick="@Close">
                            开始
                        </MenuItem>
                        @for (var i = 1; i <= List.Length; i++)
                        {
                            var i1 = i;
                            <MenuItem RouterLink="@($"/Series/{Se}/{i + "-" + List[i - 1]}")" RouterMatch="NavLinkMatch.All" OnClick="@Close">
                                @List[i1 - 1]
                            </MenuItem>
                        }
                    </ChildContent>
                </MenuItemGroup>
            </Menu>
        </Template>;
}

@code
{

    private string[] List { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Se)) return;

        List = Directory.GetFiles("wwwroot/Learn/")
            .Where(x => x.Contains(Se))
            .Select(x => x.Split("-")[^1].Replace(".md", ""))
            .ToArray();
        if (string.IsNullOrEmpty(Name)) return;
        var info = new FileInfo($"wwwroot/Learn/{Se}-{Name}.md");
        if (!info.Exists) return;
        // BootStrap, Emoji, SmartyPants and soft line as hard line breaks extensions.
        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseBootstrap()
            .UseEmojiAndSmiley()
            .UseSmartyPants()
            .UseSoftlineBreakAsHardlineBreak()
            .Build();
        var content = await File.ReadAllTextAsync(info.FullName);
       
        var document = Markdown.Parse(content, pipeline);
        var count = 1;
        Anchors.Clear();
        foreach (var node in document)
        {
            if (node is HeadingBlock { Inline: not null } headingBlock)
            {
                if (Anchors.Count == 0)
                {
                    Anchors.Add(new MarkAnchorModel()
                    {
                        Name = headingBlock.Inline.FirstChild!.ToString()!,
                        Link = $"/Article/{Name}#section"
                    });
                    continue;
                }

                Anchors.Add(new MarkAnchorModel()
                {
                    Name = headingBlock.Inline.FirstChild!.ToString()!,
                    Link = $"/Series/{Se}/{Name}#section-{count}"
                });

                count++;
            }

            if (node is not ParagraphBlock { Inline: not null } paragraphBlock) continue;
            foreach (var inline in paragraphBlock.Inline)
            {
                if (inline is not LinkInline { IsImage: true } linkInline) continue;
                if (!linkInline.Url!.StartsWith("http"))
                    linkInline.Url = $"Learn/{linkInline.Url}";
            }
        }

        Content = document.ToHtml();
    }
}

<style>

    .group-block{
        padding: 10px;
    }

    .menu-block{
        padding-top: 10px;
        padding-left: 10px;
    }

    .group-title {
        padding-bottom: 10px;
        border-bottom: 1px solid #ededed;
    }

    .ant-back-top-inner {
        height: 40px;
        width: 40px;
        line-height: 40px;
        border-radius: 20px;
        background-color: #1088e9;
        color: #fff;
        text-align: center;
        font-size: 20px;
    }

    h1, h2, h3, h4, h5, h6 {
        font-weight: bold;
        font-size: x-large;
    }

    .footer{
        display: none;
    }

    @@media screen and (max-width: 768px) {
        .footer {
            display: block !important;
        }
    }
    
    .blockquote{
        border-left: 5px solid #e8e8e8;
        padding-left: 10px;
    }
    
    .blockquote p{
        font-size: 14px;
    }
</style>