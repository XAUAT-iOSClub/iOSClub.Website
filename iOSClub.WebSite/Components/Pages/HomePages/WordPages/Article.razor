@page "/Article/{Name}"
@using iOSClub.WebSite.Models
@using Markdig
@using Markdig.Syntax
@using Markdig.Syntax.Inlines
@using Markdig.SyntaxHighlighting

<Breadcrumb Style="margin-bottom: 10px" Class="desktop-phone">
    <BreadcrumbItem>
        <a href="/Articles">社团文章</a>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <a href="/Article/@Name">@Name</a>
    </BreadcrumbItem>
</Breadcrumb>

<GridRow>
    <GridCol Xs="24" Sm="24" Md="24" Lg="24" Xl="20" Xxl="20">
        @((MarkupString)Content)
    </GridCol>
    <GridCol Xs="0" Sm="0" Md="0" Lg="0" Xl="4" Xxl="4" Class="desktop-phone">
        <Affix>
            <Anchor>
                @foreach (var s in Anchors)
                {
                    <MarkAnchor Model="s"/>
                }
            </Anchor>
        </Affix>
    </GridCol>
</GridRow>

@code {
    [Parameter] public string? Name { get; set; }
    private string Content { get; set; } = "";
    private List<MarkAnchorModel> Anchors { get; } = [];

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Name)) return;
        var info = new FileInfo($"wwwroot/ArticleFile/{Name}.md");
        if (info.Exists)
        {
            var pipeline = new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .UseBootstrap()
                .UseGridTables()
                .UseEmojiAndSmiley()
                .UseSyntaxHighlighting()
                .Build();
            var content = await File.ReadAllTextAsync(info.FullName);
            var document = Markdown.Parse(content, pipeline);
            Content = document.ToHtml();
            foreach (var node in document.AsEnumerable())
            {
                if (node is HeadingBlock { Inline: not null } headingBlock)
                {
                    if (Anchors.Count == 0)
                    {
                        Anchors.Add(new MarkAnchorModel()
                        {
                            Name = headingBlock.Inline.FirstChild!.ToString()!,
                            Link = $"/Article/{Name}#{headingBlock.Inline.FirstChild!}",
                            Level = headingBlock.Level
                        });
                        continue;
                    }

                    if (Anchors.Last().Level < headingBlock.Level)
                    {
                        Anchors.Last().Children.Add(new MarkAnchorModel()
                        {
                            Name = headingBlock.Inline.FirstChild!.ToString()!,
                            Link = $"/Article/{Name}#{headingBlock.Inline.FirstChild!}",
                            Level = headingBlock.Level
                        });
                    }
                    else
                    {
                        Anchors.Add(new MarkAnchorModel()
                        {
                            Name = headingBlock.Inline.FirstChild!.ToString()!,
                            Link = $"/Article/{Name}#{headingBlock.Inline.FirstChild!}",
                            Level = headingBlock.Level
                        });
                    }
                }

                if (node is not ParagraphBlock { Inline: not null } paragraphBlock) continue;
                foreach (var inline in paragraphBlock.Inline)
                {
                    if (inline is LinkInline { IsImage: true } linkInline)
                    {
                        linkInline.Url = $"wwwroot/ArticleFile/{linkInline.Url}";
                    }
                }
            }
        }

        await base.OnInitializedAsync();
    }

}