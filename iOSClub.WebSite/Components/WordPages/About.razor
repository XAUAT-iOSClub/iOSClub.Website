@page "/About"
@using iOSClub.WebSite.Models
@using Markdig
@using Markdig.Syntax
@inject IJSRuntime Js
@inject IMessageService _message


@code {

    private async Task OnClick(string text)
    {
        var result = await Js.InvokeAsync<bool>("copyText", text);
        await _message.Info("复制" + (result ? "成功" : "失败"));
    }

}

<PageTitle>关于我们 - 西建大iOS Club</PageTitle>

<Breadcrumb Style="margin-bottom: 10px" Class="desktop-phone">
    <BreadcrumbItem>
        <a href="/">主页</a>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <a href="/About">关于我们</a>
    </BreadcrumbItem>
</Breadcrumb>

<GridRow>
    <GridCol Xs="24" Sm="24" Md="20" Lg="20" Xl="20" Xxl="20">
        <MarkdownRenderer html="@Content" BaseUrl="ArticleFile"/>
        <h2 id="contact">联系我们</h2>
        <p>Gitee组织：
            <AppleLink Url="https://gitee.com/XAUATiOSClub">西安建筑科技大学iOS众创空间官网</AppleLink>
        </p>
        <p>Github组织：
            <AppleLink Url="https://github.com/XAUAT-iOSClub">西安建筑科技大学iOS众创空间官网</AppleLink>
        </p>
        <p>B站号:
            <AppleLink Url="https://b23.tv/emdiGP6">西建大iOSClub</AppleLink>
        </p>
        <p>微信公众号: 微信搜索
            <AppleLink OnClick="@(async () => await OnClick("西建大iOS众创空间俱乐部"))">西建大iOS众创空间俱乐部
            </AppleLink>
        </p>
        <p>欢迎给我们写邮箱提意见! 邮箱号:
            <AppleLink OnClick="@(async () => await OnClick("iosclubxauat@163.com"))">iosclubxauat@163.com</AppleLink>
        </p>
    </GridCol>
    <GridCol Md="4" Lg="4" Xl="4" Xxl="4" Class="desktop-phone">
        <Affix>
            <Anchor>
                @foreach (var s in Anchors)
                {
                    <AnchorLink Href="@s.Link" Title="@s.Name"/>
                }
            </Anchor>
        </Affix>
    </GridCol>
</GridRow>

@code {
    private string Content { get; set; } = "";
    private List<MarkAnchorModel> Anchors { get; } = [];
    
    protected override async Task OnInitializedAsync()
    {
        var info = new FileInfo("wwwroot/ArticleFile/About.md");
        if (!info.Exists) return;
        var content = await File.ReadAllTextAsync(info.FullName);
        Content = content;
        var pipeline = new MarkdownPipelineBuilder().Build();
        var document = Markdown.Parse(content, pipeline);
        Anchors.Clear();
        await document.ForEachAsync(x =>
        {
            if (x is not HeadingBlock { Inline: not null } headingBlock) return Task.CompletedTask;


            Anchors.Add(new MarkAnchorModel()
            {
                Name = headingBlock.Inline.FirstChild!.ToString()!,
                Link = $"/About#{headingBlock.Inline.FirstChild!}"
            });

            return Task.CompletedTask;
        });

        Anchors.Add(new MarkAnchorModel()
        {
            Name = "联系",
            Link = "/About#contact"
        });
    }

}