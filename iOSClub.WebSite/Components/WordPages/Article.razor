@page "/Article/{Name}"
@using iOSClub.Data
@using iOSClub.WebSite.Models
@using Markdig
@using Markdig.Syntax
@using Markdig.Syntax.Inlines
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<iOSContext> Factory

<PageTitle>@Title - iArticle</PageTitle>

<Breadcrumb Style="margin-bottom: 10px" Class="desktop-phone">
    <BreadcrumbItem>
        <a href="/Articles">社团文章</a>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <a href="/Article/@Name">@Title</a>
    </BreadcrumbItem>
</Breadcrumb>

<GridRow>
    <GridCol Xs="24" Sm="24" Md="20" Lg="20" Xl="20" Xxl="20">
        <MarkdownRenderer html="@Content"/>
    </GridCol>
    <GridCol Md="4" Lg="4" Xl="4" Xxl="4" Class="desktop-phone">
        <Affix>
            <Anchor>
                @foreach (var s in Anchors)
                {
                    <AnchorLink Href="@s.Link" Title="@s.Name"/>
                }
            </Anchor>
        </Affix>
    </GridCol>
</GridRow>

@code {
    [Parameter] public string? Name { get; set; }
    private string Content { get; set; } = "";
    private List<MarkAnchorModel> Anchors { get; } = [];
    private string Title { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        await using var db = await Factory.CreateDbContextAsync();
        var article = await db.Articles.AsNoTracking().FirstOrDefaultAsync(x => x.Path == Name);
        if (article is null) return;
        Content = article.Content;
        Title = article.Title;

        // 强制更新UI
        StateHasChanged();

        // 延迟解析锚点以提升首次渲染速度
        await ParseAnchorsAsync(Content);
    }

    private async Task ParseAnchorsAsync(string content)
    {
        var pipeline = new MarkdownPipelineBuilder().Build();
        var document = Markdown.Parse(content, pipeline);
        var count = 0;
        Anchors.Clear();
        await document.ForEachAsync(x =>
        {
            if (x is not HeadingBlock { Inline.FirstChild: not null } headingBlock)
                return Task.CompletedTask;

            count++;
            if (count == 1) return Task.CompletedTask;

            var id = headingBlock.Inline.FirstChild switch
            {
                LineBreakInline line => line.ToString() ?? "",
                LiteralInline literal => literal.ToString(),
                EmphasisInline link => link.FirstChild?.ToString() ?? "",
                _ => ""
            };

            if (string.IsNullOrEmpty(id)) return Task.CompletedTask;

            Anchors.Add(new MarkAnchorModel
            {
                Name = id,
                Link = $"/Article/{Name}#{id}"
            });

            return Task.CompletedTask;
        });

        // 更新锚点后再次刷新
        StateHasChanged();
    }

}